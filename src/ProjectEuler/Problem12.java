// Written by Zack Rosales
// Project Euler Problem 12
// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
// The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
// Let us list the factors of the first seven triangle numbers:
// 1: 1
// 3: 1,3
// 6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.
// What is the value of the first triangle number to have over five hundred divisors?

package ProjectEuler;

public class Problem12 // Problem12 class start
{
	public static void main(String[] args) // main method start
	{
		boolean found = false;
		long count = 1,
			triangleNum;
		int	factors;
		
		while (!found)
		{
			triangleNum = findTriangle(count);
			count++;
			factors = findFactors(triangleNum);
			if (factors >= 500)
			{
				System.out.println(String.format("Solution found: %d has %d divisors", triangleNum, factors));
				found = true;
			} // end if
			else
			{
				System.out.println(String.format("Not found yet. Only %d divisors", factors));
			}
		} // end while
	} // main method end
	
	// findTriangle method finds the nth triangle number, where n = num
	private static long findTriangle(long num) // findTriangle method start
	{
		long total = 0;
		
		while (num > 0)
		{
			total += num--;
		}
		
		return total;
	} // findTriangle method end
	
	// findFactors method counts the number of integer divisors the triangle number has
	private static int findFactors(long num) // findFactors method start
	{
		int count = 0;
		
		for (int x = 1; x < num / 2 + 1; x++)
		{
			if (num % x == 0)
			{
				count++;
			} // end if
		} // end for
		
		return count;
	} // findFactors method end
} // Problem12 class end
