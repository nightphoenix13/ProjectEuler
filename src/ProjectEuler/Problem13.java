// Written by Zack Rosales
// This program finds the solution of Project Euler problem 13
// Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.

package ProjectEuler;

import java.math.*;

public class Problem13 // Problem13 class start
{
	final static int SIZE = 100;
	static BigInteger[] numbers = new BigInteger[SIZE];
	
	public static void main(String[] args) // main method start
	{
		fillArray();
		BigInteger total = addNumbers();
		String output = "The total is " + total;
		System.out.println(output);
	} // main method end
	
	// fillArray method fills the array with 100, 50-digit numbers
	private static void fillArray() // fillArray method start
	{
		numbers[0] = new BigInteger("37107287533902102798797998220837590246510135740250");
		numbers[1] = new BigInteger("46376937677490009712648124896970078050417018260538");
		numbers[2] = new BigInteger("74324986199524741059474233309513058123726617309629");
		numbers[3] = new BigInteger("91942213363574161572522430563301811072406154908250");
		numbers[4] = new BigInteger("23067588207539346171171980310421047513778063246676");
		numbers[5] = new BigInteger("89261670696623633820136378418383684178734361726757");
		numbers[6] = new BigInteger("28112879812849979408065481931592621691275889832738");
		numbers[7] = new BigInteger("44274228917432520321923589422876796487670272189318");
		numbers[8] = new BigInteger("47451445736001306439091167216856844588711603153276");
		numbers[9] = new BigInteger("70386486105843025439939619828917593665686757934951");
		numbers[10] = new BigInteger("62176457141856560629502157223196586755079324193331");
		numbers[11] = new BigInteger("64906352462741904929101432445813822663347944758178");
		numbers[12] = new BigInteger("92575867718337217661963751590579239728245598838407");
		numbers[13] = new BigInteger("58203565325359399008402633568948830189458628227828");
		numbers[14] = new BigInteger("80181199384826282014278194139940567587151170094390");
		numbers[15] = new BigInteger("35398664372827112653829987240784473053190104293586");
		numbers[16] = new BigInteger("86515506006295864861532075273371959191420517255829");
		numbers[17] = new BigInteger("71693888707715466499115593487603532921714970056938");
		numbers[18] = new BigInteger("54370070576826684624621495650076471787294438377604");
		numbers[19] = new BigInteger("53282654108756828443191190634694037855217779295145");
		numbers[20] = new BigInteger("36123272525000296071075082563815656710885258350721");
		numbers[21] = new BigInteger("45876576172410976447339110607218265236877223636045");
		numbers[22] = new BigInteger("17423706905851860660448207621209813287860733969412");
		numbers[23] = new BigInteger("81142660418086830619328460811191061556940512689692");
		numbers[24] = new BigInteger("51934325451728388641918047049293215058642563049483");
		numbers[25] = new BigInteger("62467221648435076201727918039944693004732956340691");
		numbers[26] = new BigInteger("15732444386908125794514089057706229429197107928209");
		numbers[27] = new BigInteger("55037687525678773091862540744969844508330393682126");
		numbers[28] = new BigInteger("18336384825330154686196124348767681297534375946515");
		numbers[29] = new BigInteger("80386287592878490201521685554828717201219257766954");
		numbers[30] = new BigInteger("78182833757993103614740356856449095527097864797581");
		numbers[31] = new BigInteger("16726320100436897842553539920931837441497806860984");
		numbers[32] = new BigInteger("48403098129077791799088218795327364475675590848030");
		numbers[33] = new BigInteger("87086987551392711854517078544161852424320693150332");
		numbers[34] = new BigInteger("59959406895756536782107074926966537676326235447210");
		numbers[35] = new BigInteger("69793950679652694742597709739166693763042633987085");
		numbers[36] = new BigInteger("41052684708299085211399427365734116182760315001271");
		numbers[37] = new BigInteger("65378607361501080857009149939512557028198746004375");
		numbers[38] = new BigInteger("35829035317434717326932123578154982629742552737307");
		numbers[39] = new BigInteger("94953759765105305946966067683156574377167401875275");
		numbers[40] = new BigInteger("88902802571733229619176668713819931811048770190271");
		numbers[41] = new BigInteger("25267680276078003013678680992525463401061632866526");
		numbers[42] = new BigInteger("36270218540497705585629946580636237993140746255962");
		numbers[43] = new BigInteger("24074486908231174977792365466257246923322810917141");
		numbers[44] = new BigInteger("91430288197103288597806669760892938638285025333403");
		numbers[45] = new BigInteger("34413065578016127815921815005561868836468420090470");
		numbers[46] = new BigInteger("23053081172816430487623791969842487255036638784583");
		numbers[47] = new BigInteger("11487696932154902810424020138335124462181441773470");
		numbers[48] = new BigInteger("63783299490636259666498587618221225225512486764533");
		numbers[49] = new BigInteger("67720186971698544312419572409913959008952310058822");
		numbers[50] = new BigInteger("95548255300263520781532296796249481641953868218774");
		numbers[51] = new BigInteger("76085327132285723110424803456124867697064507995236");
		numbers[52] = new BigInteger("37774242535411291684276865538926205024910326572967");
		numbers[53] = new BigInteger("23701913275725675285653248258265463092207058596522");
		numbers[54] = new BigInteger("29798860272258331913126375147341994889534765745501");
		numbers[55] = new BigInteger("18495701454879288984856827726077713721403798879715");
		numbers[56] = new BigInteger("38298203783031473527721580348144513491373226651381");
		numbers[57] = new BigInteger("34829543829199918180278916522431027392251122869539");
		numbers[58] = new BigInteger("40957953066405232632538044100059654939159879593635");
		numbers[59] = new BigInteger("29746152185502371307642255121183693803580388584903");
		numbers[60] = new BigInteger("41698116222072977186158236678424689157993532961922");
		numbers[61] = new BigInteger("62467957194401269043877107275048102390895523597457");
		numbers[62] = new BigInteger("23189706772547915061505504953922979530901129967519");
		numbers[63] = new BigInteger("86188088225875314529584099251203829009407770775672");
		numbers[64] = new BigInteger("11306739708304724483816533873502340845647058077308");
		numbers[65] = new BigInteger("82959174767140363198008187129011875491310547126581");
		numbers[66] = new BigInteger("97623331044818386269515456334926366572897563400500");
		numbers[67] = new BigInteger("42846280183517070527831839425882145521227251250327");
		numbers[68] = new BigInteger("55121603546981200581762165212827652751691296897789");
		numbers[69] = new BigInteger("32238195734329339946437501907836945765883352399886");
		numbers[70] = new BigInteger("75506164965184775180738168837861091527357929701337");
		numbers[71] = new BigInteger("62177842752192623401942399639168044983993173312731");
		numbers[72] = new BigInteger("32924185707147349566916674687634660915035914677504");
		numbers[73] = new BigInteger("99518671430235219628894890102423325116913619626622");
		numbers[74] = new BigInteger("73267460800591547471830798392868535206946944540724");
		numbers[75] = new BigInteger("76841822524674417161514036427982273348055556214818");
		numbers[76] = new BigInteger("97142617910342598647204516893989422179826088076852");
		numbers[77] = new BigInteger("87783646182799346313767754307809363333018982642090");
		numbers[78] = new BigInteger("10848802521674670883215120185883543223812876952786");
		numbers[79] = new BigInteger("71329612474782464538636993009049310363619763878039");
		numbers[80] = new BigInteger("62184073572399794223406235393808339651327408011116");
		numbers[81] = new BigInteger("66627891981488087797941876876144230030984490851411");
		numbers[82] = new BigInteger("60661826293682836764744779239180335110989069790714");
		numbers[83] = new BigInteger("85786944089552990653640447425576083659976645795096");
		numbers[84] = new BigInteger("66024396409905389607120198219976047599490197230297");
		numbers[85] = new BigInteger("64913982680032973156037120041377903785566085089252");
		numbers[86] = new BigInteger("16730939319872750275468906903707539413042652315011");
		numbers[87] = new BigInteger("94809377245048795150954100921645863754710598436791");
		numbers[88] = new BigInteger("78639167021187492431995700641917969777599028300699");
		numbers[89] = new BigInteger("15368713711936614952811305876380278410754449733078");
		numbers[90] = new BigInteger("40789923115535562561142322423255033685442488917353");
		numbers[91] = new BigInteger("44889911501440648020369068063960672322193204149535");
		numbers[92] = new BigInteger("41503128880339536053299340368006977710650566631954");
		numbers[93] = new BigInteger("81234880673210146739058568557934581403627822703280");
		numbers[94] = new BigInteger("82616570773948327592232845941706525094512325230608");
		numbers[95] = new BigInteger("22918802058777319719839450180888072429661980811197");
		numbers[96] = new BigInteger("77158542502016545090413245809786882778948721859617");
		numbers[97] = new BigInteger("72107838435069186155435662884062257473692284509516");
		numbers[98] = new BigInteger("20849603980134001723930671666823555245252804609722");
		numbers[99] = new BigInteger("53503534226472524250874054075591789781264330331690");
	} // fillArray method end
	
	// addNumbers method adds the numbers in the array
	private static BigInteger addNumbers() // addNumbers method start
	{
		// local variable
		BigInteger total = new BigInteger("0");
		
		total = numbers[0];
		for (int x = 1; x < SIZE; x++)
		{
			total = total.add(numbers[x]);
		} // end for
		
		return total;
	} // addNumbers method end
} // Problem13 class end
